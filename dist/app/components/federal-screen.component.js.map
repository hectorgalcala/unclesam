{"version":3,"file":"federal-screen.component.js","sourceRoot":"","sources":["federal-screen.component.ts"],"names":[],"mappings":"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","sourcesContent":["// Angular 2 objects\nimport {Component, OnInit} from '@angular/core';\n\n// Models\nimport {Paycheck} from '../models/paycheck.model';\nimport {IncomeStatement} from '../models/income-statement.model';\n// Services\nimport {FederalWithholdingService} from '../services/federal-withholding.service';\n\n// Annual Rate Federal Withholding\nimport {SingleAnnualRateService} from '../services/single-status/single-annual-rate.service';\nimport {MarriedAnnualRateService} from '../services/married-status/married-annual-rate.service';\n\n// Monthly Rate Federal Withholding\nimport {SingleMonthlyRateService} from '../services/single-status/single-monthly-rate.service';\nimport {MarriedMonthlyRateService} from '../services/married-status/married-monthly-rate.service';\n\n// Income Statement data such as Salary After Taxes\nimport {IncomeStatementService} from '../services/income-statement/income-statement.service';\n\n@Component({\n  moduleId: module.id,\n  selector: 'federal-screen',\n  templateUrl: 'federal-screen.component.html',\n  styleUrls: ['federal-screen.component.css'],\n  providers:[FederalWithholdingService, IncomeStatementService, SingleAnnualRateService, MarriedAnnualRateService, SingleMonthlyRateService, MarriedMonthlyRateService]\n})\nexport class FederalScreenComponent implements OnInit{\n\n  // Additional w2/payroll taxes\n  public paycheck: any;\n  public income_statement: any;\n\n  // Financial data\n  public taxes: number;\n  public net_pay: number;\n  public annual_pay: number;\n  public monthly_pay: number;\n  public semi_monthly_pay: number;\n  public biweekly_pay: number;\n  public weekly_pay: number;\n\n  constructor(private fed_service: FederalWithholdingService) {\n\n  }\n\n  ngOnInit(){\n    this.paycheck = new Paycheck();\n    this.income_statement = new IncomeStatement();\n    this.setAllnull();\n    this.paycheck.gross_pay = 50000;\n    this.fed_tax(this.paycheck.gross_pay, \"single\", \"annually\");\n\n  }\n\n  setAllnull(){\n    this.paycheck.fed_with = null;\n    this.paycheck.social_security = null;\n    this.paycheck.medicare = null;\n    this.paycheck.gross_pay = null;\n  }\n\n  yearly_net_income(gross_pay, taxes){\n    this.income_statement.annual_pay = (gross_pay - taxes);\n    this.income_statement.monthly_pay = this.income_statement.annual_pay/12\n    this.income_statement.semi_monthly_pay = this.income_statement.annual_pay/24;\n    this.income_statement.biweekly_pay = this.income_statement.annual_pay/26\n    this.income_statement.weekly_pay = this.income_statement.annual_pay/52;\n  }\n\n  monthly_net_income(gross_pay, taxes){\n    this.income_statement.annual_pay = (gross_pay - taxes)*12;\n    this.income_statement.monthly_pay = this.income_statement.annual_pay/12\n    this.income_statement.semi_monthly_pay = this.income_statement.annual_pay/24;\n    this.income_statement.biweekly_pay = this.income_statement.annual_pay/26\n    this.income_statement.weekly_pay = this.income_statement.annual_pay/52;\n  }\n\n\n  compute_taxes(){\n    this.paycheck.social_security = this.social_security_tax(this.paycheck.gross_pay);\n    this.paycheck.medicare = this.medicare_tax(this.paycheck.gross_pay);\n    this.income_statement.taxes = this.paycheck.fed_with + this.paycheck.social_security + this.paycheck.medicare;\n    if(this.paycheck.pay_freq == \"monthly\"){\n      this.monthly_net_income(this.paycheck.gross_pay, this.income_statement.taxes);\n    }\n\n    if(this.paycheck.pay_freq == \"annually\"){\n      this.yearly_net_income(this.paycheck.gross_pay, this.income_statement.taxes);\n    }\n  }\n\n  social_security_tax(gross){\n    if(gross >= 118500){\n      this.paycheck.social_security = 118500*0.062;\n    }\n    else {\n      this.paycheck.social_security = gross*0.062;\n    }\n      return this.paycheck.social_security;\n  }\n\n  medicare_tax(gross){\n    if(gross >= 200000){\n    this.paycheck.medicare = 200000*0.0145 + ((gross - 200000)*0.0235);\n    }\n    else {\n    this.paycheck.medicare = gross*0.0145;\n    }\n      return this.paycheck.medicare;\n  }\n\n  // NOTE Blank HTML input elements === \"\" so when input is blank,  gross will be equal to zero. This way we wont a get a NaN issue.\n  fed_tax(gross, status, pay_freq) {\n    if (gross == \"\") {\n      gross = 0;\n    }\n    this.paycheck.gross_pay = parseInt(gross);\n    this.paycheck.fed_status = status;\n    this.paycheck.pay_freq = pay_freq;\n    this.paycheck.fed_with = this.fed_service.fed_tax(this.paycheck.gross_pay, this.paycheck.fed_status, this.paycheck.pay_freq);\n    this.compute_taxes();\n  }\n\n\n}\n"]}