{"version":3,"file":"federal-screen.component.js","sourceRoot":"","sources":["federal-screen.component.ts"],"names":[],"mappings":"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","sourcesContent":["// Angular 2 objects\nimport {Component} from '@angular/core';\n\n// Interface\nimport {FederalTax} from '../models/federal-tax.interface';\n\n// Services\nimport {FederalWithholdingService} from '../services/federal-withholding.service';\n\n// Annual Rate Federal Withholding\nimport {SingleAnnualRateService} from '../services/single-status/single-annual-rate.service';\nimport {MarriedAnnualRateService} from '../services/married-status/married-annual-rate.service';\n\n// Monthly Rate Federal Withholding\nimport {SingleMonthlyRateService} from '../services/single-status/single-monthly-rate.service';\nimport {MarriedMonthlyRateService} from '../services/married-status/married-monthly-rate.service';\n\n// Income Statement data such as Salary After Taxes\nimport {IncomeStatementService} from '../services/income-statement/income-statement.service';\n\n@Component({\n  moduleId: module.id,\n  selector: 'federal-screen',\n  templateUrl: 'federal-screen.component2.html',\n  styleUrls: ['federal-screen.component.css'],\n  providers:[FederalWithholdingService, IncomeStatementService, SingleAnnualRateService, MarriedAnnualRateService, SingleMonthlyRateService, MarriedMonthlyRateService]\n})\nexport class FederalScreenComponent {\n\n  // Additional w2/payroll taxes\n  public social_security: number;\n  public medicare: number;\n\n  // This fields are inside FederalTax interface\n\n  // Data for taxable income\n  public gross_pay: number;\n  public gross_ytd: number;\n  public pay_freq: string;\n  public fed_status: string;\n  public fed_allow: number;\n  public fed_with: number;\n\n  // Financial data\n  public taxes: number;\n  public net_pay: number;\n  public annual_pay: number;\n  public monthly_pay: number;\n  public semi_monthly_pay: number;\n  public biweekly_pay: number;\n  public weekly_pay: number;\n\n  constructor(private fed_service: FederalWithholdingService, private income_statement: IncomeStatementService) {\n    this.setAllnull();\n    this.gross_pay = 50000;\n  }\n\n  setAllnull() {\n    this.fed_with = null;\n    this.social_security = null;\n    this.medicare = null;\n    this.gross_pay = null;\n  }\n\n  yearly_net_income(gross_pay, taxes) {\n    this.annual_pay = gross_pay - taxes;\n    this.monthly_pay = this.annual_pay/12;\n    this.semi_monthly_pay = this.annual_pay/24;\n    this.biweekly_pay = this.annual_pay/26;\n    this.weekly_pay = this.annual_pay/52;\n  }\n\n  monthly_net_income(gross_pay, taxes){\n    this.annual_pay = (gross_pay - taxes)*12;\n    this.monthly_pay = this.annual_pay/12\n    this.semi_monthly_pay = this.annual_pay/24;\n    this.biweekly_pay = this.annual_pay/26\n    this.weekly_pay = this.annual_pay/52;\n  }\n\n\n  compute_taxes() {\n    this.social_security = this.gross_pay*0.062;\n    this.medicare = this.gross_pay*0.0145;\n    this.taxes = this.fed_with + this.social_security + this.medicare;\n    if(this.pay_freq == \"monthly\"){\n      this.monthly_net_income(this.gross_pay, this.taxes);\n    }\n\n    if(this.pay_freq == \"annually\"){\n      this.yearly_net_income(this.gross_pay, this.taxes);\n    }\n  }\n\n  // NOTE Blank HTML input elements === \"\" so when input is blank,  gross will be equal to zero. This way we wont a get a NaN issue.\n  fed_tax(gross, status, pay_freq) {\n    if (gross == \"\") {\n      gross = 0;\n    }\n    this.gross_pay = parseInt(gross);\n    this.fed_status = status;\n    this.pay_freq = pay_freq;\n    this.fed_with = this.fed_service.fed_tax(this.gross_pay, this.fed_status, this.pay_freq);\n    this.compute_taxes();\n  }\n\n}\n"]}