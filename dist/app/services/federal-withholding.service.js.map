{"version":3,"file":"federal-withholding.service.js","sourceRoot":"","sources":["federal-withholding.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,2CAAsC,4CAA4C,CAAC,CAAA;AACnF,4CAAuC,8CACvC,CAAC,CADoF;AACrF,4CAAuC,6CAA6C,CAAC,CAAA;AACrF,6CAAwC,+CAA+C,CAAC,CAAA;AAExF;IAKE,mCAAoB,0BAAmD,EAAS,2BAAqD,EAAU,2BAAqD,EAAU,4BAAuD;QAAjP,+BAA0B,GAA1B,0BAA0B,CAAyB;QAAS,gCAA2B,GAA3B,2BAA2B,CAA0B;QAAU,gCAA2B,GAA3B,2BAA2B,CAA0B;QAAU,iCAA4B,GAA5B,4BAA4B,CAA2B;QACnQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,2CAAO,GAAP,UAAQ,KAAK,EAAE,MAAM,EAAE,QAAQ;QAE7B,EAAE,CAAA,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC;YACvB,EAAE,CAAC,CAAC,QAAQ,IAAI,UAAU,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC3D,CAAC;YAEH,EAAE,CAAC,CAAC,QAAQ,IAAI,SAAS,CAAC,CAAC,CAAC;gBACxB,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,KAAK,CAAC,CAAA;YAC3D,CAAC;QACH,CAAC;QAED,EAAE,CAAA,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC;YACxB,EAAE,CAAA,CAAC,QAAQ,IAAI,UAAU,CAAC,CAAE,CAAC;gBACzB,MAAM,CAAC,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC9D,CAAC;YAED,EAAE,CAAA,CAAC,QAAQ,IAAI,SAAS,CAAC,CAAA,CAAC;gBACtB,MAAM,CAAC,IAAI,CAAC,4BAA4B,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC;IACH,CAAC;IA/BH;QAAC,iBAAU,EAAE;;iCAAA;IAoCb,gCAAC;AAAD,CAAC,AAnCD,IAmCC;AAnCY,iCAAyB,4BAmCrC,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport {SingleAnnualRateService} from './single-status/single-annual-rate.service';\nimport {MarriedAnnualRateService} from './married-status/married-annual-rate.service'\nimport {SingleMonthlyRateService} from './single-status/single-monthly-rate.service';\nimport {MarriedMonthlyRateService} from './married-status/married-monthly-rate.service';\n@Injectable()\nexport class FederalWithholdingService {\n\npublic fed_with: number;\npublic gross: any;\n\n  constructor(private single_annual_rate_service: SingleAnnualRateService,private married_annual_rate_service: MarriedAnnualRateService, private single_monthly_rate_service: SingleMonthlyRateService, private married_monthly_rate_service: MarriedMonthlyRateService) {\n    this.fed_with = null;\n  }\n\n  fed_tax(gross, status, pay_freq) {\n\n    if(status === \"single\") {\n      if (pay_freq == \"annually\") {\n        return this.single_annual_rate_service.computeFed(gross);\n      }\n\n    if (pay_freq == \"monthly\") {\n        return this.single_monthly_rate_service.computeFed(gross)\n      }\n    }\n\n    if(status === \"married\") {\n      if(pay_freq == \"annually\")  {\n          return this.married_annual_rate_service.computeFed(gross);\n      }\n\n      if(pay_freq == \"monthly\"){\n          return this.married_monthly_rate_service.computeFed(gross);\n      }\n    }\n  }\n\n\n\n\n}\n"]}